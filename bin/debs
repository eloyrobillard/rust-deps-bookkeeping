#!/usr/bin/env node
const { platform, arch, env, version, release } = process;

const cwd = process.cwd();

const PLATFORMS = {
	win32: {
		x64: `${cwd}/node_modules/debs/target/x86_64-pc-windows-msvc/release/debs.exe`,
		arm64: `${cwd}/node_modules/debs/target/aarch64-pc-windows-msvc/release/debs.exe`,
	},
	darwin: {
		x64: `${cwd}/node_modules/debs/target/x86_64-apple-darwin/release/debs`,
		arm64: `${cwd}/node_modules/debs/target/aarch64-apple-darwin/release/debs`,
	},
	linux: {
		x64: `${cwd}/node_modules/debs/target/x86_64-unknown-linux-gnu/release/debs`,
		arm64: `${cwd}/node_modules/debs/target/aarch64-unknown-linux-gnu/release/debs`,
	},
};

const binPath = env.DEBS_BINARY || PLATFORMS?.[platform]?.[arch];
if (binPath) {
	const result = require("child_process").spawnSync(
		require.resolve(binPath),
		process.argv.slice(2),
		{
			shell: false,
			stdio: "inherit",
			env: {
				...env,
				JS_RUNTIME_VERSION: version,
				JS_RUNTIME_NAME: release.name,
			},
		},
	);

	if (result.error) {
		throw result.error;
	}

	process.exitCode = result.status;
} else {
	console.error(
		"The Debs CLI package doesn't ship with prebuilt binaries for your platform yet. " +
			"You can still use the CLI by cloning the debs repo from GitHub, " +
			"and follow the instructions there to build the CLI for your platform.",
	);
	process.exitCode = 1;
}
