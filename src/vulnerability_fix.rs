use std::collections::HashMap;

use serde::Deserialize;

#[derive(Debug, Deserialize)]
pub struct AbbreviatedPackageMetadata {
    pub name: String,
    pub versions: HashMap<String, AbbreviatedVersionObject>,
}

#[derive(Debug, Deserialize)]
pub struct AbbreviatedVersionObject {
    pub name: String,
    pub version: String,
    pub dependencies: Option<HashMap<String, String>>,
    #[serde(rename = "optionalDependencies")]
    pub optional_dependencies: Option<HashMap<String, String>>,
    #[serde(rename = "devDependencies")]
    pub dev_dependencies: Option<HashMap<String, String>>,
    #[serde(rename = "peerDependencies")]
    pub peer_dependencies: Option<HashMap<String, String>>,
    #[serde(rename = "peerDependenciesMeta")]
    pub peer_dependencies_meta: Option<HashMap<String, String>>,
}

pub async fn pkg_info(
    pkg_name: &str,
) -> Result<Result<AbbreviatedPackageMetadata, serde_json::Error>, reqwest::Error> {
    let body = reqwest::get(format!("https://registry.npmjs.org/{pkg_name}")).await;

    match body {
        Ok(res) => Ok(serde_json::from_str(res.text().await.unwrap().as_str())),
        Err(e) => Err(e),
    }
}

pub async fn pkg_version_info(
    pkg_name: &str,
    version: &str,
) -> Result<Result<AbbreviatedVersionObject, serde_json::Error>, reqwest::Error> {
  let body = reqwest::get(format!("https://registry.npmjs.org/{pkg_name}/{version}")).await;

    match body {
        Ok(res) => Ok(serde_json::from_str(res.text().await.unwrap().as_str())),
        Err(e) => Err(e),
    }
}
